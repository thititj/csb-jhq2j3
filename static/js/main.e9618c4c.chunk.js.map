{"version":3,"sources":["App.tsx","index.tsx"],"names":["data","name","prob","ValidationTextField","styled","TextField","borderColor","borderWidth","borderLeftWidth","padding","ResponsiveAppBar","AppBar","position","sx","Container","maxWidth","Toolbar","disableGutters","Typography","variant","noWrap","component","display","DisplaySentiment","props","emoji","sentiment","Box","justContent","textAlign","fontSize","App","useState","text","setText","setSentiment","handleSubmit","length","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","CssBaseline","minHeight","Grid","container","spacing","item","xs","sm","gutterBottom","label","defaultValue","id","fullWidth","multiline","rows","onChange","event","target","value","required","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","fill","Button","disableElevation","onClick","justifyContent","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sXAeMA,EAAO,CACX,CACEC,KAAM,MACNC,KAAM,IAER,CACED,KAAM,MACNC,KAAM,IAER,CACED,KAAM,MACNC,KAAM,GAER,CACED,KAAM,IACNC,KAAM,IAIJC,EAAsBC,YAAOC,IAAPD,CAAkB,CAC5C,2BAA4B,CAC1BE,YAAa,OACbC,YAAa,GAEf,6BAA8B,CAC5BD,YAAa,MACbC,YAAa,GAEf,iCAAkC,CAChCC,gBAAiB,EACjBC,QAAS,oBAIPC,EAAmB,WACvB,OACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,GAAI,GAA9B,SACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACC,EAAA,EAAD,CAASC,gBAAc,EAAvB,SACE,cAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,QAAM,EACNC,UAAU,MACVR,GAAI,CAAES,QAAS,QAJjB,mCAcJC,EAAmB,SAACC,GACxB,IAAQC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UACf,OACE,eAACC,EAAA,EAAD,CAAKd,GAAI,CAAEe,YAAa,SAAUC,UAAW,UAA7C,UACE,cAACX,EAAA,EAAD,CAAYL,GAAI,CAAEiB,SAAU,QAA5B,SAAuCL,IACvC,cAACP,EAAA,EAAD,CAAYL,GAAI,CAAEiB,SAAU,QAA5B,SAAuCJ,QA0H9BK,MArHf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,IAA3C,mBAAON,EAAP,KAAkBS,EAAlB,KAMMC,EAAY,iDAAG,qGACC,IAAhBH,EAAKI,OADU,wDAIbC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEV,KAAMA,KAPZ,SASIW,MACrB,oCACAN,GAXiB,cASbO,EATa,gBAaAA,EAASC,OAbT,OAab9C,EAba,OAcnBmC,EAAanC,EAAK0B,WAdC,4CAAH,qDAiBlB,OACE,qCACE,cAACqB,EAAA,EAAD,IACA,eAACpB,EAAA,EAAD,CAAKd,GAAI,CAAEmC,UAAW,SAAtB,UACE,cAAC,EAAD,IACA,cAAClC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACkC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACpC,EAAA,EAAD,CAAYC,QAAQ,KAAKoC,cAAY,EAAClC,UAAU,MAAhD,uCAIF,cAAC4B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACpC,EAAA,EAAD,CAAYC,QAAQ,KAAKoC,cAAY,EAAClC,UAAU,MAAhD,sBAIF,cAAC4B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACnD,EAAD,CACEqD,MAAM,aACNrC,QAAQ,WACRsC,aAAa,GACbC,GAAG,4BACHC,WAAS,EACTC,WAAS,EACTC,KAAM,GACNC,SA/CO,SAACC,GACpB7B,EAAQ6B,EAAMC,OAAOC,QA+CTC,UAAQ,MAGZ,cAACjB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,eAACa,EAAA,EAAD,CACEC,MAAO,IACPC,OAAQ,IACRrE,KAAMA,EACNsE,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,UAWE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKH,QAAQ,OAAOI,KAAK,iBAG7B,cAACjC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,cAAC6B,EAAA,EAAD,CACEhE,QAAQ,YACRiE,kBAAgB,EAChBC,QAASjD,EAHX,uBAQF,cAACa,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,cAAC6B,EAAA,EAAD,CAAQhE,QAAQ,OAAOiE,kBAAgB,EAAvC,0BAIF,cAACnC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,eAAC3B,EAAA,EAAD,CACEd,GAAI,CACFS,QAAS,OACTgE,eAAgB,SAChBC,WAAY,UAJhB,UAOiB,MAAd7D,GACC,cAAC,EAAD,CAAkBD,MAAM,eAAKC,UAAU,aAE1B,QAAdA,GACC,cAAC,EAAD,CAAkBD,MAAM,eAAKC,UAAU,aAE1B,QAAdA,GACC,cAAC,EAAD,CAAkBD,MAAM,eAAKC,UAAU,YAE1B,QAAdA,GACC,cAAC,EAAD,CAAkBD,MAAM,eAAKC,UAAU,8BCnLzD8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e9618c4c.chunk.js","sourcesContent":["import {\n  CssBaseline,\n  Box,\n  Container,\n  AppBar,\n  Toolbar,\n  Typography,\n  TextField,\n  Grid,\n  Button\n} from \"@mui/material\";\nimport { useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport { styled } from \"@mui/material/styles\";\n\nconst data = [\n  {\n    name: \"Neu\",\n    prob: 0.9\n  },\n  {\n    name: \"Pos\",\n    prob: 0.1\n  },\n  {\n    name: \"Neg\",\n    prob: 0.0\n  },\n  {\n    name: \"Q\",\n    prob: 0.0\n  }\n];\n\nconst ValidationTextField = styled(TextField)({\n  \"& input:valid + fieldset\": {\n    borderColor: \"gray\",\n    borderWidth: 2\n  },\n  \"& input:invalid + fieldset\": {\n    borderColor: \"red\",\n    borderWidth: 2\n  },\n  \"& input:valid:focus + fieldset\": {\n    borderLeftWidth: 6,\n    padding: \"4px !important\" // override inline-style\n  }\n});\n\nconst ResponsiveAppBar = () => {\n  return (\n    <AppBar position=\"static\" sx={{}}>\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ display: \"flex\" }}\n          >\n            This is appbar\n          </Typography>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n\nconst DisplaySentiment = (props: { emoji: string; sentiment: string }) => {\n  const { emoji, sentiment } = props;\n  return (\n    <Box sx={{ justContent: \"center\", textAlign: \"center\" }}>\n      <Typography sx={{ fontSize: \"4rem\" }}>{emoji}</Typography>\n      <Typography sx={{ fontSize: \"2rem\" }}>{sentiment}</Typography>\n    </Box>\n  );\n};\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [sentiment, setSentiment] = useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    if (text.length === 0) {\n      return;\n    }\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ text: text })\n    };\n    const response = await fetch(\n      \"https://nlp-api.ppirch.me/predict\",\n      requestOptions\n    );\n    const data = await response.json();\n    setSentiment(data.sentiment);\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Box sx={{ minHeight: \"100vh\" }}>\n        <ResponsiveAppBar />\n        <Container maxWidth=\"xl\">\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <Typography variant=\"h3\" gutterBottom component=\"div\">\n                Text Sentiment Analysis\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Typography variant=\"h3\" gutterBottom component=\"div\">\n                Result\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <ValidationTextField\n                label=\"Text input\"\n                variant=\"outlined\"\n                defaultValue=\"\"\n                id=\"validation-outlined-input\"\n                fullWidth\n                multiline\n                rows={10}\n                onChange={handleChange}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"prob\" fill=\"#9DF310\" />\n              </BarChart>\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <Button\n                variant=\"contained\"\n                disableElevation\n                onClick={handleSubmit}\n              >\n                analyze\n              </Button>\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <Button variant=\"text\" disableElevation>\n                How to use\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Box\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                {sentiment === \"q\" && (\n                  <DisplaySentiment emoji=\"🤔\" sentiment=\"Question\" />\n                )}\n                {sentiment === \"neg\" && (\n                  <DisplaySentiment emoji=\"🙁\" sentiment=\"Negative\" />\n                )}\n                {sentiment === \"neu\" && (\n                  <DisplaySentiment emoji=\"😐\" sentiment=\"Neutral\" />\n                )}\n                {sentiment === \"pos\" && (\n                  <DisplaySentiment emoji=\"😀\" sentiment=\"Positive\" />\n                )}\n              </Box>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}